generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Order {
  id            Int         @id @default(autoincrement())
  username      String
  email         String
  city          String
  postalCode    String
  streetAddress String
  province      String
  phonenumber   String
  totalPrice    Float
  paid          Boolean
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         OrderItem[] // Relación con la tabla intermedia
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  brand       String
  stock       Boolean     @default(true)
  price       Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
  images      Image[]
  properties  Properties?
  likes       Like[]
  orderItems  OrderItem[] // Relación con la tabla intermedia
}

model Like {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())

  @@unique([userId, productId]) // Evita likes duplicados del mismo usuario al mismo producto
}

model Properties {
  id               Int      @id @default(autoincrement())
  model            String
  capacity         String
  ram              String
  color            String
  battery          String?
  processor        String?
  graphics         String?
  chipset          String?
  connectivity     String?
  navigation       String?
  audio            String?
  sensors          String?
  features         String?
  weight           String?
  dimensions       String?
  fastcharging     Boolean?
  frontcamera      String?
  network2g        String?
  network3g        String?
  network4g        String?
  network5g        String?
  operatingsystem  String?
  rearcamera       String?
  screenresolution String?
  screensize       String?
  screentype       String?
  productId        Int?     @unique
  simcard          String?
  product          Product? @relation(fields: [productId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  shipments     ShipmentData[]
  passwordHash  String?
  role          UserRole       @default(USER)
  likes         Like[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model ShipmentData {
  id           Int      @id @default(autoincrement())
  phoneNumber  String?
  streetName   String?
  streetNumber String?
  province     String?
  city         String?
  postalCode   String?
  apartment    String?
  floor        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
// model Authenticator {
//   credentialID         String  @unique
//   userId               String
//   providerAccountId    String
//   credentialPublicKey  String
//   counter              Int
//   credentialDeviceType String
//   credentialBackedUp   Boolean
//   transports           String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@id([userId, credentialID])
// }
