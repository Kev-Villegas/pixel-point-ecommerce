generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  brand       String
  stock       Boolean     @default(true)
  price       Float
  orderId     Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  images      Image[]
  order       Order?      @relation(fields: [orderId], references: [id])
  properties  Properties?
}

model Order {
  id            Int       @id @default(autoincrement())
  username      String
  email         String
  city          String
  postalCode    String
  streetAddress String
  province      String
  phonenumber   String
  paid          Boolean
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  items         Product[]
}

model Properties {
  id               Int      @id @default(autoincrement())
  model            String
  capacity         String
  ram              String
  color            String
  battery          String?
  processor        String?
  graphics         String?
  chipset          String?
  connectivity     String?
  navigation       String?
  audio            String?
  sensors          String?
  features         String?
  weight           String?
  dimensions       String?
  fastcharging     Boolean?
  frontcamera      String?
  network2g        String?
  network3g        String?
  network4g        String?
  network5g        String?
  operatingsystem  String?
  rearcamera       String?
  screenresolution String?
  screensize       String?
  screentype       String?
  productId        Int?     @unique
  simcard          String?
  product          Product? @relation(fields: [productId], references: [id])
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  passwordHash  String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}